parameters:
    buildConfiguration: 'Release'

steps:
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - ${{ parameters.buildConfiguration }}'
      inputs:
          command: 'build'
          arguments: '--no-restore --configuration ${{ parameters.buildConfiguration }}'
          projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Install .NET tools from local manifest'
      inputs:
          command: custom
          custom: tool
          arguments: 'restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests - ${{ parameters.buildConfiguration }}'
      inputs:
          command: 'test'
          arguments: '--no-build --configuration ${{ parameters.buildConfiguration }}
                      /p:CollectCoverage=true 
                      /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
          publishTestResults: true
          projects: '**/*.Tests.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Create code coverage report'
      inputs:
          command: custom
          custom: tool
          arguments: 'run reportgenerator 
          -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml 
          -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - ${{ parameters.buildConfiguration }}'
      inputs:
          command: 'publish'
          projects: '**/*.csproj'
          publishWebProjects: false
          arguments: '--no-build --configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/${{ parameters.buildConfiguration }}'
          zipAfterPublish: true
